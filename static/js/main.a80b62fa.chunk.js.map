{"version":3,"sources":["components/Word.tsx","components/Recorder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomWord","a","fetch","json","response","word","getPronunciation","rand","console","log","audio","phonetics","phonetic","Word","getNewWord","newWord","setWord","useState","useEffect","className","onClick","undefined","Audio","play","playAudio","MicRecorder","require","Recorder","isRecording","setIsRecording","recording","setRecording","mR","setMR","error","setError","navigator","mediaDevices","getUserMedia","then","stream","newMr","bitrate","stop","getMp3","blob","blobUrl","URL","createObjectURL","start","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a80b62fa.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst dictAPI = 'https://api.dictionaryapi.dev/api/v2/entries/en/'\nconst randAPI = 'https://random-words-api.vercel.app/word'\n\ntype WordAndPron = {\n    word: string,\n    phonetic: string,\n    audio: string\n}\n\nconst getRandomWord = async (): Promise<string> => {\n    const response = await (await fetch(randAPI)).json()\n    return response[0].word\n}\n\nconst playAudio = (word: WordAndPron | undefined) => {\n    if (word === undefined) return\n    const audio = new Audio(word.audio)\n    audio.play()\n}\n\nconst getPronunciation = async (): Promise<WordAndPron | undefined> => {\n    let word\n    do {\n        const rand = await getRandomWord()\n        const response: any = await (await fetch(dictAPI + rand)).json()\n        word = response[0]\n\n    } while (!word)\n    console.log(word)\n    return { word: word.word, audio: word.phonetics[0].audio, phonetic: word.phonetic }\n}\n\n\nfunction Word() {\n\n    const getNewWord = async () => {\n        const newWord = await getPronunciation()\n        setWord(newWord)\n        console.log(newWord)\n    }\n    const [word, setWord] = useState<WordAndPron>()\n\n    useEffect(() => {\n        getNewWord()\n    }, [])\n\n\n    return (\n        <div className=\"section\" >\n\n                <div className=\"card\" >\n                    <div className=\"card-content has-text-centered\">\n                        <div className=\"media-content\">\n                            <div className=\"title is-6\">\n                                {word ? word.word : 'Loading'}\n                            </div>\n                            <div className=\"subtitle\">\n\n                                {word ? word.phonetic : 'Loading'}\n                            </div>\n                        </div>\n                </div>\n            </div>\n            <br />\n            <div className=\"has-text-centered\">\n\n                <button className=\"button is-success\" onClick={() => { getNewWord() }}>New word</button>\n                <br /> <br />\n                <button className=\"button is-success\" onClick={() => { playAudio(word) }} >Correct pronunciation</button>\n                <p></p>\n            </div>\n        </div>\n\n    )\n}\n\n\nexport default Word","import React, { useState, useEffect } from 'react';\nconst MicRecorder = require('mic-recorder-to-mp3');\n\nfunction Recorder() {\n\n    const [isRecording, setIsRecording] = useState(false)\n    const [recording, setRecording] = useState<string | undefined>()\n    const [mR, setMR] = useState<any>()\n    const [error, setError] = useState<string | undefined>()\n\n    useEffect(() => {\n        navigator.mediaDevices.getUserMedia({ audio: true })\n            .then(stream => {\n                const newMr = new MicRecorder({ bitrate: 128 })\n                setMR(newMr)\n            }, () => {\n                setError('Microphone blocked by browser.')\n            })\n    }, [])\n\n    const record = () => {\n        if (!mR) return\n        setIsRecording(!isRecording)\n\n        if (!isRecording) {\n            setIsRecording(true)\n            mR.start()\n        } else {\n            setIsRecording(false)\n            mR.stop().getMp3()\n                .then(([buffer, blob]: any[]) => {\n                    const blobUrl = URL.createObjectURL(blob)\n                    setRecording(blobUrl)\n                })\n        }\n    }\n\n    const play = () => {\n        if (recording) {\n            const audio = new Audio(recording)\n            audio.play()\n        }\n    }\n\n    return (\n        <div className=\"section has-text-centered \">\n            { error ? <div className=\"message is-danger\"><div className=\"message-body\">{error}</div></div> : null}\n            <button className=\"button is-success\" onClick={record} >{isRecording ? \"Stop\" : \"Record\"}</button>\n            <span>   </span>\n            <button className=\"button is-success\" onClick={play} >Play</button>\n            <br />\n        </div>\n    )\n}\n\nexport default Recorder","import React from 'react';\nimport Word from './components/Word'\nimport Recorder from './components/Recorder'\n\nfunction App() {\n  return (\n    <div className=\"container has-background-success-light\">\n      <Word />\n      <Recorder />\n      <div className=\"section container has-background-white has-text-centered\">\n        <h3 className=\"title is-4\">Instructions</h3>\n        <p>\n          Record yourself pronunciating the word. Listen to the correct pronunciation. <br />\n          Record yourself until you get it perfect and then get a new word.\n        </p>\n        <br />\n        <h4 className=\"title is-5\">Why is the app so slow?</h4>\n        <p>Because it's fetching random words from one API, but many of these are not available\n          in the API for getting the pronuncation, so it keeps trying new random words until one\n        is found. <br />\n        Please note that recording only seems to work in Firefox and Chrome. Please use a real browser. \n\n        </p>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}